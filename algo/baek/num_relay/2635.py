# 백준 - 수 이어가기

import sys
sys.stdin = open('input.txt')

N = int(input())
result = []             #가장 긴 수열을 저장할 리스트

for i in range(1, N+1):
    temp = [N, i]

    while True:
        value = temp[-2] - temp[-1]

        if value >= 0:
            temp.append(value)

        else:
            break

    if len(result) < len(temp):
        result = temp

print(len(result))
# print(' '.join(result))         # 타입 에러가 나 : 왜냐면 join은 리스트의 값들이 문자열 일떄만 사용가능하거든
# 그래서 join 을 쓸려면 str 으로 형변환을 해줘야해 지금 result에는 정수 int 값이 들어있으니까!

for i in result:
    print(i, end=' ')

"""
    while True:
        value = temp[-2] - temp[-1]  
    여기서 왜     
        value = temp[0] - temp[1] 은 안될까?
    
====>>>>> gpt 행님
좋아! tmp[0] - tmp[1]와 관련된 설명이었는데, 이걸 예시로 더 명확하게 보여줄게.

상황 설명
우리가 tmp[0] - tmp[1]을 사용하면 리스트의 처음 두 숫자만 가지고 계산하게 돼. 
즉, 계속 리스트의 맨 앞에 있는 두 숫자만 사용해서 빼기를 하게 되는 거야.

하지만 우리가 원하는 것은 이전 두 숫자들을 계속 빼서 새로운 숫자를 추가해 나가는 것이지, 계속 같은 숫자들만 빼고 싶지는 않아.

예시 1: tmp[0] - tmp[1]을 사용했을 때
만약 N = 10이고 i = 3이라면:

처음에는 tmp = [10, 3]이야.
이제 tmp[0] - tmp[1] = 10 - 3 = 7이 돼. 그러면 tmp 리스트에 7을 추가해줘서 tmp = [10, 3, 7]이 돼.
그런데 계속 tmp[0] - tmp[1]을 계산하니까 다시 첫 번째와 두 번째 숫자인 10 - 3을 계산하게 돼.

결과가 계속 7이 돼. 그래서 tmp = [10, 3, 7, 7]이 돼.
또 반복해보면 계속 10 - 3 = 7이니까:

tmp = [10, 3, 7, 7, 7]
즉, 계속 같은 숫자들만 추가되고 새로운 수열이 만들어지지 않게 돼. 이 방법으로는 수열이 잘 이어지지 않고, 계속 같은 값만 반복돼.

예시 2: tmp[-2] - tmp[-1]을 사용했을 때
이번에는 tmp[-2] - tmp[-1]을 사용해 볼게:

처음에는 tmp = [10, 3]이야.
이제 tmp[-2] - tmp[-1] = 10 - 3 = 7이 돼서 tmp = [10, 3, 7]이 돼.
다음에는 리스트의 마지막 두 값을 사용해서 뺄 거야:

tmp[-2] - tmp[-1] = 3 - 7 = -4
여기서 음수가 나왔기 때문에, 반복문이 멈추고 수열이 끝나. 그러면 수열은 tmp = [10, 3, 7]이 되고, 새로운 수열이 만들어져.

차이점:
tmp[0] - tmp[1]은 항상 처음 두 숫자만 사용해서 계속 같은 값을 빼게 돼서, 수열이 제대로 이어지지 않고 계속 반복돼.
반면에 tmp[-2] - tmp[-1]을 사용하면 마지막 두 숫자를 계속 사용해서 새로운 값을 만들어내니까, 수열이 이어지고 멈추는 시점도 명확해져.
이렇게 해서 tmp[-2] - tmp[-1]을 사용하는 게 수열을 올바르게 이어갈 수 있는 방법이야.
        
"""